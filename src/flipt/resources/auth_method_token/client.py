# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ..auth.types.authentication_token import AuthenticationToken

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AuthMethodTokenClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_token(
        self,
        *,
        name: str,
        namespace_key: typing.Optional[str] = OMIT,
        description: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
    ) -> AuthenticationToken:
        """
        Parameters:
            - name: str.

            - namespace_key: typing.Optional[str].

            - description: str.

            - expires_at: typing.Optional[dt.datetime].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "description": description}
        if namespace_key is not OMIT:
            _request["namespaceKey"] = namespace_key
        if expires_at is not OMIT:
            _request["expiresAt"] = expires_at
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "auth/v1/method/token"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AuthenticationToken, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuthMethodTokenClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_token(
        self,
        *,
        name: str,
        namespace_key: typing.Optional[str] = OMIT,
        description: str,
        expires_at: typing.Optional[dt.datetime] = OMIT,
    ) -> AuthenticationToken:
        """
        Parameters:
            - name: str.

            - namespace_key: typing.Optional[str].

            - description: str.

            - expires_at: typing.Optional[dt.datetime].
        """
        _request: typing.Dict[str, typing.Any] = {"name": name, "description": description}
        if namespace_key is not OMIT:
            _request["namespaceKey"] = namespace_key
        if expires_at is not OMIT:
            _request["expiresAt"] = expires_at
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "auth/v1/method/token"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(AuthenticationToken, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
