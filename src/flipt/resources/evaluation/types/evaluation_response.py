# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from .boolean_evaluation_response import BooleanEvaluationResponse
from .error_evaluation_response import ErrorEvaluationResponse
from .evaluation_response_type import EvaluationResponseType
from .variant_evaluation_response import VariantEvaluationResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EvaluationResponse(pydantic.BaseModel):
    type: EvaluationResponseType
    boolean_response: typing.Optional[BooleanEvaluationResponse] = pydantic.Field(alias="booleanResponse")
    variant_response: typing.Optional[VariantEvaluationResponse] = pydantic.Field(alias="variantResponse")
    error_response: typing.Optional[ErrorEvaluationResponse] = pydantic.Field(alias="errorResponse")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
